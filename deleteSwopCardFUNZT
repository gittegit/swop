
const UpdateMatchStatus = require('./updateMatchStatus');
/* Require additional modules and handlers here */
//var module = require('module');
//var myCode = require('./otherModule');
//var updateHandler = require('./MyClass/update');

/**
 * This method is invoked if an GET or POST request is send to this module resource
 * Additional backend functionality can be implemented in such method
 *
 * @param {baqend.EntityManager} db The database instance which can be used to load and save additional objects
 * @param {baqend.binding.User} db.User.me The actual unresolved user who requests the operation or null if the user
 * is not logged in
 * @param {Object} data The request payload, the decoded query parameters of a GET request or the parsed body of a
 * POST request
 * @param {express.Request} req The express request object {@link http://expressjs.com/api.html#req}
 * @param {Object} this The module context
 * @return {Promise<*>|Object|Array|String} A json value or string which is send back to the client
 *
 * @throws Abort(reason[, data]) to abort the request with the specified reason
 */
 var user;
 var swopCard;
exports.post = function(db, req, res) {
    if (!db.User.me) throw new Abort('Du musst dich einloggen.')

    var params = req.body;

    // REFACTOR
    return db.User.load(req.userId, { depth: 1}).then((user) => {
        // load swopCard, um sie beim Set-Loeschen zu uebergeben
        this.user = user;
        return db.SwopCard.load(params.id);
    }).then((swopCard) => {
        this.swopCard = swopCard;
        if (swopCard.match !== null) {
            // returned das Match-Object
            return UpdateMatchStatus.update(db, res, this.swopCard.match.id, 'DECLINED');
        } else {
            return null
        }
    }).then((matchObject) => {
        return true;
    }).then((success) => {
        var user = this.user;
        var swopCard = this.swopCard;
        this.user.swopCards.delete(swopCard);
        return this.user.save();
    }).then((success) => {
        // loeschen aus den swopCards Set hat geklappt
        var swopCard = this.swopCard;
        return swopCard.delete();
    }).then(() => {
        // swopCard loeschen hat geklappt
        res.status(200);
        res.send("denke es hat geklappt");
    }).catch((err) => {
        throw new Abort('SwopCard existiert nicht.');
    })
};
